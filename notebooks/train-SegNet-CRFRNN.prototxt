name: "SegNet-CRFRNN"
# layer {
#   name: "data"
#   type: "Data"
#   top: "data"  # 256 * 256
#   data_param {
#     source: "/home/nathan/mzmo/data/nuclei/seg_nuclei_0.1/feature_lmdb"
#     backend: LMDB
#     batch_size: 8
#   }
#   # transform_param {
#   #   scale: 0.00390625
#   # }
#   # include: { phase: TRAIN }
# }

# # Stochastic transforms like crop will break this
# layer {
#   name: "label"
#   type: "Data"
#   top: "label"
#   data_param {
#     source: "/home/nathan/mzmo/data/nuclei/seg_nuclei_0.1/mask_lmdb"
#     backend: LMDB
#     batch_size: 8
#   }
#   # transform_param {
#   #   scale: 0.00390625
#   # }
#   # include: { phase: TRAIN }
# }

#
#layer {
#  name: "data_rgb"
#  type: "Data"
#  top: "data"
#  data_param {
#    source: "/YOURPATH-pascal-lmdb/rgb-val"
#    backend: LMDB
#    batch_size: 1
#  }
 # include: { phase: TEST }
#}
#layer {
#  name: "data_label"
#  type: "Data"
#  top: "label"
#  data_param {
#    source: "/YOURPATH-pascal-lmdb/label-val"
#    backend: LMDB
#    batch_size: 1
#  }
#  include: { phase: TEST }
#}

layer {
 name: "data"
 type: "DenseImageData"
 top: "data"
 top: "label"
 dense_image_data_param {
   source: "/home/nathan/mzmo/data/nuclei/seg_nuclei_0.1/list.txt" 
   batch_size: 8
   shuffle: true
 }
}

layer {
  name: "norm"
  type: "LRN"
  bottom: "data"
  top: "norm"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "norm"
  top: "conv1" # 128 * 128
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" }
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "conv1_bn"
  type: "BN"
  bn_param {
  scale_filler { type: "constant" value: 1 }
  shift_filler { type: "constant" value: 0.001 }
 }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"  # 64 * 64
  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"  # 32*32
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 4
    stride: 2
    pad: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "conv2_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2" 
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2" # 16* 16
  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ----------------------------------------- #
#                                           #
#           Begin reconstruction            #
#                                           #
# ----------------------------------------- #


layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "pool2"
  bottom: "pool2_mask"
  top: "upsample2"  # 32*32
  upsample_param {
    upsample_w: 32
    upsample_h: 32
  }
}
layer {
  name: "conv_decode2"
  type: "Deconvolution"
  bottom: "upsample2"
  top: "conv_decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 4
    pad: 1
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode2"
  top: "conv_decode2"  # 64*64
  name: "conv_decode2_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}
layer {
  name: "upsample1"
  type: "Upsample"
  bottom: "conv_decode2"
  bottom: "pool1_mask"
  top: "upsample1"  # 128*128
  upsample_param {
    upsample_w: 128
    upsample_h: 128
  }
}

# Deconv: Strid * (Input - 1) + Kernel - 2*Pad
layer {
  name: "conv_decode1"
  type: "Deconvolution"
  bottom: "upsample1"
  top: "conv_decode1"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 64
    kernel_size: 8
    pad: 3
    stride: 2
    weight_filler { type: "msra" }
    bias_filler { type: "constant" }
  }
}
layer {
  bottom: "conv_decode1"
  top: "conv_decode1"
  name: "conv_decode1_bn"
  type: "BN"
  bn_param {
  scale_filler { type: "constant" value: 1 }
  shift_filler { type: "constant" value: 0.001 }
 }
}
layer {
  name: "conv_classifier"
  type: "Deconvolution"
  bottom: "conv_decode1"
  top: "conv_classifier"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 2  # Number of classes
    kernel_size: 1
    weight_filler { type: "msra"  }
    bias_filler { type: "constant" }
  }
}


#layer { type: 'Crop' name: 'crop' bottom: 'bigscore' bottom: 'data' top: 'coarse' }


###### First train with this commented

layer { 
  type: 'Split' 
  name: 'splitting'
  bottom: 'conv_classifier' 
  top: 'unary' 
  top: 'Q0'
}

layer {
  name: "crfrnn" #if you set name "inference1", code will load parameters from caffemodel.
  type: "MultiStageMeanfield"
  bottom: "unary"
  bottom: "Q0"
  bottom: "data"
  top: "crfrnn"
  param {
    lr_mult: 10000 #learning rate for W_G
  }
  param {
    lr_mult: 10000 #learning rate for W_B
  }
  param {
    lr_mult: 1000 #learning rate for compatiblity transform matrix
  }
  multi_stage_meanfield_param {
   num_iterations: 10
   compatibility_mode: POTTS#Initialize the compatilibity transform matrix with a matrix whose diagonal is -1.
   threshold: 2
   theta_alpha: 160
   theta_beta: 3
   theta_gamma: 3
   spatial_filter_weights_str: "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
   bilateral_filter_weights_str: "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "crfrnn"
  bottom: "label"
  top: "loss"
  loss_param {
    weight_by_label_freqs: true
    class_weighting: 0.62447
    class_weighting: 2.50446
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "crfrnn"
  bottom: "label"
  top: "accuracy"
  top: "per_class_accuracy"
}