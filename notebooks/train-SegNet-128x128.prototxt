name: "SegNet-CRFRNN"
layer {
  name: "data"
  type: "Data"
  top: "data"  # 128*128
  data_param {
    source: "/home/nathan/mzmo/data/nuclei/nuclei_seg_0.1/feature_lmdb"
    backend: LMDB
    batch_size: 16
  }
  include: { phase: TRAIN }
}

# Stochastic transforms like crop will break this
layer {
  name: "label"
  type: "Data"
  top: "label"
  data_param {
    source: "/home/nathan/mzmo/data/nuclei/nuclei_seg_0.1/mask_lmdb"
    backend: LMDB
    batch_size: 16
  }

  include: { phase: TRAIN }
}

#
layer {
 name: "data_rgb"
 type: "Data"
 top: "data"
 data_param {
   source: "/home/nathan/mzmo/data/nuclei/nuclei_seg_0.1/feature_test_lmdb"
   backend: LMDB
   batch_size: 1
 }
 include: { phase: TEST }
}
layer {
 name: "data_label"
 type: "Data"
 top: "label"
 data_param {
   source: "/home/nathan/mzmo/data/nuclei/nuclei_seg_0.1/mask_test_lmdb"
   backend: LMDB
   batch_size: 1
 }
 include: { phase: TEST }
}

# layer {
#  name: "data"
#  type: "DenseImageData"
#  top: "data"
#  top: "label"
#  dense_image_data_param {
#    source: "/home/nathan/mzmo/data/nuclei/seg_nuclei_0.1/list.txt" 
#    batch_size: 8
#    shuffle: true
#  }
# }

layer {
  name: "norm"
  type: "LRN"
  bottom: "data"
  top: "norm"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

# 128x128
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "norm"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "conv1_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

# 64*64
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# 64*64
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "conv2_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

# 32*32
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# 32*32
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "conv3_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}

# 16*16
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  top: "pool3_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# # 16*16
# layer {
#   name: "conv4"
#   type: "Convolution"
#   bottom: "pool3"
#   top: "conv4"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   convolution_param {
#     num_output: 64
#     kernel_size: 7
#     pad: 3
#     weight_filler {
#       type: "msra"
#     }
#     bias_filler {
#       type: "constant"
#     }
#   }
# }
# layer {
#   bottom: "conv4"
#   top: "conv4"
#   name: "conv4_bn"
#   type: "BN"
#   bn_param {
#   scale_filler {
#     type: "constant"
#     value: 1
#   }
#   shift_filler {
#     type: "constant"
#     value: 0.001
#   }
#  }
# }
# layer {
#   name: "relu4"
#   type: "ReLU"
#   bottom: "conv4"
#   top: "conv4"
# }

# # 8*8
# layer {
#   name: "pool4"
#   type: "Pooling"
#   bottom: "conv4"
#   top: "pool4"
#   top: "pool4_mask"
#   pooling_param {
#     pool: MAX
#     kernel_size: 2
#     stride: 2
#   }
# }

# # 16*16
# layer {
#   name: "upsample4"
#   type: "Upsample"
#   bottom: "pool4"
#   bottom: "pool4_mask"
#   top: "upsample4"
#   upsample_param {
#     upsample_h:16
#     upsample_w:16
#   }
# }

# # 16*16
# layer {
#   name: "conv_decode4"
#   type: "Convolution"
#   bottom: "upsample4"
#   top: "conv_decode4"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   convolution_param {
#     num_output: 64
#     kernel_size: 7
#     pad: 3
#     weight_filler {
#       type: "msra"
#     }
#     bias_filler {
#       type: "constant"
#     }
#   }
# }
# layer {
#   bottom: "conv_decode4"
#   top: "conv_decode4"
#   name: "conv_decode4_bn"
#   type: "BN"
#   bn_param {
#   scale_filler {
#     type: "constant"
#     value: 1
#   }
#   shift_filler {
#     type: "constant"
#     value: 0.001
#   }
#  }
# }

# 32*32
layer {
  name: "upsample3"
  type: "Upsample"
  bottom: "pool3"
  bottom: "pool3_mask"
  top: "upsample3"
  upsample_param {
    scale:2 
    # upsample_h:32
    # upsample_w:32
  }
}
layer {
  name: "conv_decode3"
  type: "Convolution"
  bottom: "upsample3"
  top: "conv_decode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode3"
  top: "conv_decode3"
  name: "conv_decode3_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}

# 64*64
layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "conv_decode3"
  bottom: "pool2_mask"
  top: "upsample2"
  upsample_param {
    scale: 2
    # upsample_h:64
    # upsample_w:64
  }
}
layer {
  name: "conv_decode2"
  type: "Convolution"
  bottom: "upsample2"
  top: "conv_decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode2"
  top: "conv_decode2"
  name: "conv_decode2_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}

# 128*128
layer {
  name: "upsample1"
  type: "Upsample"
  bottom: "conv_decode2"
  bottom: "pool1_mask"
  top: "upsample1"
  upsample_param {
    scale: 2
    # upsample_h:128
    # upsample_w:128
  }
}

# ???????
layer {
  name: "conv_decode1"
  type: "Convolution"
  bottom: "upsample1"
  top: "conv_decode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode1"
  top: "conv_decode1"
  name: "conv_decode1_bn"
  type: "BN"
  bn_param {
  scale_filler {
    type: "constant"
    value: 1
  }
  shift_filler {
    type: "constant"
    value: 0.001
  }
 }
}
layer {
  name: "conv_classifier"
  type: "Convolution"
  bottom: "conv_decode1"
  top: "conv_classifier"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}

#layer { type: 'Crop' name: 'crop' bottom: 'bigscore' bottom: 'data' top: 'coarse' }


###### First train with this commented

# layer { 
#   type: 'Split' 
#   name: 'splitting'
#   bottom: 'conv_classifier' 
#   top: 'unary' 
#   top: 'Q0'
# }

# layer {
#   name: "crfrnn" #if you set name "inference1", code will load parameters from caffemodel.
#   type: "MultiStageMeanfield"
#   bottom: "unary"
#   bottom: "Q0"
#   bottom: "data"
#   top: "crfrnn"
#   param {
#     lr_mult: 1000 #learning rate for W_G
#   }
#   param {
#     lr_mult: 1000 #learning rate for W_B
#   }
#   param {
#     lr_mult: 100 #learning rate for compatiblity transform matrix
#   }
#   multi_stage_meanfield_param {
#    num_iterations: 10
#    compatibility_mode: POTTS#Initialize the compatilibity transform matrix with a matrix whose diagonal is -1.
#    threshold: 2
#    theta_alpha: 160
#    theta_beta: 3
#    theta_gamma: 3
#    spatial_filter_weights_str: "1 5"
#    bilateral_filter_weights_str: "5 3"
#   }
# }

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "conv_classifier"
  bottom: "label"
  top: "loss"
  loss_param {
    # normalize: true
    weight_by_label_freqs: true
    ### PCA weights
    # class_weighting: 5.215
    # class_weighting: 1.0
    # class_weighting: 2.0137
    # class_weighting: 0.9508
    # class_weighting: 0.8109
    # ignore_label: 0

    ### Nuclei weights
    # ignore_label: 0
    class_weighting: 0.62447
    class_weighting: 2.50446
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "conv_classifier"
  bottom: "label"
  top: "accuracy"
  top: "per_class_accuracy"
}